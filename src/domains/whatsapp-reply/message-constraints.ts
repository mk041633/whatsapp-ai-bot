    export const getHelloMessage = () => {
        const variants = [
        getMessageByHour(),
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
        "–ü—Ä–∏–≤–µ—Ç",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é",
        ];
    
        const index = parseInt((Math.random() * variants.length).toString());
    
        if (index >= variants.length) {
        return variants[0];
        }
    
        return variants[index];
  };
  
  const getMessageByHour = () => {
    const arr = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"];
  
    const currentHour = new Date().getHours();
  
    if (currentHour >= 8 && currentHour <= 12) {
      return arr[0];
    } else if (currentHour > 12 && currentHour <= 16) {
      return arr[1];
    } else {
      return arr[2];
    }
  };
  
  export const getManagerName = () => {
    const managers = ["–ë–∞–∫—ã—Ç–∂–∞–Ω", "C—ã–º–±–∞—Ç", "–ê–π–∂–∞–Ω"];
  
    const index = parseInt((Math.random() * managers.length).toString());
  
    if (index >= managers.length) {
      return managers[0];
    }
  
    return managers[index];
  };
  
  export const getKaspiName = () => {
    const names = ["Kaspi", "kaspi", "–ö–∞—Å–ø–∏", "kaspi", "Kaspi kz", "–ö–∞—Å–ø–∏ kz"];
  
    const index = parseInt((Math.random() * names.length).toString());
  
    if (index >= names.length) {
      return names[0];
    }
  
    return names[index];
  };
  
  export const getSignAfterHelloMessage = () => {
    const signs = ["!", ".", ",", "!)", ")", ":)", " "];
  
    const index = parseInt((Math.random() * signs.length).toString());
  
    if (index >= signs.length) {
      return signs[0];
    }
  
    return signs[index];
  };
  
  export const getSmile = () => {
    const variants = ["", " üëã", " üòä"];
  
    const index = parseInt((Math.random() * variants.length).toString());
  
    if (index >= variants.length) {
      return variants[0];
    }
  
    return variants[index];
  };
  
  export const getPerformance = () => {
    const variants = ["–ú–µ–Ω—è –∑–æ–≤—É—Ç", "–Ø", "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"];
  
    const index = parseInt((Math.random() * variants.length).toString());
  
    if (index >= variants.length) {
      return variants[0];
    }
  
    return variants[index];
  };
  
  export const firstMessages = () => {
  
    return [
      `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}.`,
      `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}.`,
      `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}.`,
    ];
  };
  
  export const middleMessagesWithStoreName = (storeName = "") => {
    if (!storeName) {
      return [];
    }
  
    return [
      `–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω ${storeName}?`,
      `${storeName}?`,
      `${storeName} - —ç—Ç–æ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω?`,
    ];
  };
/*
  export const getRandomFirstMessage = (storeName = "") => {
    const firstMessages = [
      `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}. –£ –≤–∞—Å –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω –Ω–∞ ${getKaspiName()}?`,
      // `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}. –£ –≤–∞—Å –µ—Å—Ç—å ${getKaspiName()} –º–∞–≥–∞–∑–∏–Ω?`,
      // `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}. –í–∏–∂—É –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ –Ω–∞ ${getKaspiName()}?`,
      `${getHelloMessage()}${getSmile()}${getSignAfterHelloMessage()} ${getPerformance()} ${getManagerName()}. –ü—Ä–æ–¥–∞–µ—Ç–µ –Ω–∞ ${getKaspiName()}?`,
    ];
  
    const availableMessages = firstMessages.concat(
      firstMessages()
    );
  
    const index = parseInt((Math.random() * availableMessages.length).toString());
  
    let message = availableMessages[index];
    if (!message) {
      message = availableMessages[0];
    }
  
    return message;
  };
  */
  export const linkMessages = () => {
    return [
      `–•–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ ${getKaspiName}? 
  –° –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ —Å—Ä–µ–¥–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—è –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ Kaspi –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –±—ã—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–º–∏. 
  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ —É–≤–µ–ª–∏—á—å—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ ${getKaspiName()}!
  
  ${getRandomSalescoutLink()}
  `,
      `–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∫–∞—Å–ø–∏ ‚Äì —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞. –° –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. 
  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—â—É—Ç–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!
  
  ${getRandomSalescoutLink()}
  `,
      `–•–æ—Ç–∏—Ç–µ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞? –¢–æ–≥–¥–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∫–∞—Å–ø–∏ ‚Äì —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ! –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∏ —Ü–µ–Ω—ã –≤—Å–µ–≥–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã –∏ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. 
  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—â—É—Ç–∏—Ç–µ –≤—Å—é –º–æ—â—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!
  
  ${getRandomSalescoutLink()}`,
    ];
  };
  
  const getRandomSalescoutLink = () => {
    const variants: string[] = [
      "https://rb.gy/4il9wy",
      "https://t.ly/oQasX",
      "https://tinyurl.com/2p8j3ade",
      "http://bit.ly/3jilWJp",
    ];
    const labelVariants = ["–°—Å—ã–ª–∫–∞", "–í–æ—Ç —Å—Å—ã–ª–∫–∞"];
  
    const index = parseInt((Math.random() * variants.length).toString());
    const i = parseInt((Math.random() * labelVariants.length).toString());
  
    let message = variants[index];
    if (!message) {
      message = variants[0];
    }
  
    let label = labelVariants[i];
    if (!label) {
      label = labelVariants[0];
    }
  
    return `${label}: ${
      Math.floor(Math.random() * 2) === 1 ? "\n" : ""
    }${message}`;
  };
  